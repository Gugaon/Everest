using NHibernate;
using NHibernate.Cfg;
using NHibernate.Cfg.MappingSchema;
using NHibernate.Dialect;
using NHibernate.Driver;
using NHibernate.Event;
using NHibernate.Event.Default;
using NHibernate.Mapping.ByCode;
using NHibernate.Tool.hbm2ddl;
using NLog;
using System;
using System.Collections.Generic;
using System.Data;
using Teltec.Backup.DAO.FluentNHibernate;

namespace Teltec.Backup.DAO.NHibernate
{
	public static class NHibernateHelper
	{
		private static Logger logger = LogManager.GetCurrentClassLogger();
		private static ISessionFactory _sessionFactory;
		private static Configuration _configuration;
		private static HbmMapping _mapping;

		public static ISession OpenSession()
		{
			//
			// NOTES:
			// 1. The ISession is not threadsafe! Never access the same ISession in two concurrent threads.
			// 2. 
			//

			//Open and return the nhibernate session
			return SessionFactory.OpenSession();
		}

		public static ISessionFactory SessionFactory
		{
			get
			{
				if (_sessionFactory == null)
				{
					//Create the session factory
					_sessionFactory = Configuration.BuildSessionFactory();
				}
				return _sessionFactory;
			}
		}

		public static Configuration Configuration
		{
			get
			{
				if (_configuration == null)
				{
					//Create the nhibernate configuration
					_configuration = CreateConfiguration();
				}
				return _configuration;
			}
		}

		public static HbmMapping Mapping
		{
			get
			{
				if (_mapping == null)
				{
					// Create the mapping
					_mapping = CreateMapping();
				}
				return _mapping;
			}
		}

		private static Configuration CreateConfiguration()
		{
			var config = new Configuration();

			config.DataBaseIntegration(db =>
			{
				db.Dialect<SQLiteDialect>();
				db.Driver<SQLite20Driver>();
				db.KeywordsAutoImport = Hbm2DDLKeyWords.AutoQuote;
				db.IsolationLevel = IsolationLevel.ReadCommitted;

				db.ConnectionString = "Data Source=database.sqlite3;Version=3;New=True";
				db.Timeout = 10;

				// Enabled for testing.
				db.LogFormattedSql = true;
				db.LogSqlInConsole = true;
				db.AutoCommentSql = true;
			});

			// IMPORTANT: This must happen before the session factory is built.
			//config.AddAuxiliaryDatabaseObject(OneHiLoRowPerEntityScript(config, "entity_type", "backup_plan"));
			//config.AddAuxiliaryDatabaseObject(OneHiLoRowPerEntityScript(config, "entity_type", "cloud_storage_accounts"));
			//config.AddAuxiliaryDatabaseObject(OneHiLoRowPerEntityScript(config, "entity_type", "backup_plans_source_entries"));

			config.SessionFactoryName("MainSessionFactory");

			// Load mappings.
			config.AddDeserializedMapping(Mapping, null);

			// Register interceptors.
			//config.SetInterceptor(new NHibernateAuditInterceptor());

			// Register listeners.
			ILoadEventListener[] stack = new ILoadEventListener[] {
				new NHibernateLoadListener(), // Custom listener.
				new DefaultLoadEventListener() // Keep the default listener.
			};
			config.EventListeners.LoadEventListeners = stack;

			// ...
			SchemaMetadataUpdater.QuoteTableAndColumns(config);

			UpdateSchema(config);
			ValidateSchema(config);

			return config;
		}

		private static HbmMapping CreateMapping()
		{
			var mapper = new ModelMapper();

			// Add mappings to the model mapper.
			mapper.AddMappings(new List<System.Type> {
				typeof(dont_use_ICloudStorageAccountMap),
				typeof(dont_use_AmazonS3AccountMap),
				typeof(dont_use_BackupPlanMap),
				typeof(dont_use_BackupPlanSourceEntryMap)
			});

			// Create and return a HbmMapping of the model mapping in code.
			return mapper.CompileMappingForAllExplicitlyAddedEntities();
		}

//		private static IAuxiliaryDatabaseObject OneHiLoRowPerEntityScript(
//			Configuration cfg, String columnName, String columnValue)
//		{
//			var dialect = Activator.CreateInstance(Type.GetType(
//				cfg.GetProperty(NHibernate.Cfg.Environment.Dialect))) as Dialect;

//			var script = new StringBuilder();
//			script.AppendFormat(
//				@"ALTER TABLE {0} {1} {2} {3} NULL;
//				{4}
//				INSERT INTO {0} ({5}, {2}) VALUES (1, '{6}');
//				{4}",
//				TableHiLoGenerator.DefaultTableName, dialect.AddColumnString,
//				columnName, dialect.GetTypeName(SqlTypeFactory.GetAnsiString(100)),
//				(dialect.SupportsSqlBatches == true ? "GO" : String.Empty),
//				TableHiLoGenerator.DefaultColumnName, columnValue);

//			return new SimpleAuxiliaryDatabaseObject(script.ToString(), null);
//		}

		private static bool ValidateSchema(Configuration config)
		{
			SchemaValidator validator = new SchemaValidator(config);
			try
			{
				validator.Validate();
				validator = null;
				return true;
			}
			catch (Exception ex)
			{
				logger.Fatal("Schema validation error", ex);
			}
			finally
			{
				validator = null;
			}
			return false;
		}

		private static void UpdateSchema(Configuration config)
		{
			SchemaUpdate schema = new SchemaUpdate(config);
			const bool useStdOut = true;
			const bool doUpdate = true;
			schema.Execute(useStdOut, doUpdate);
			schema = null;
		}

		public static string IdentifierPropertyName(Type type)
		{
			return SessionFactory.GetClassMetadata(type).IdentifierPropertyName;
		}

		public static string EntityName(Type type)
		{
			return NHibernateUtil.Entity(type).Name;
		}
	}
}
